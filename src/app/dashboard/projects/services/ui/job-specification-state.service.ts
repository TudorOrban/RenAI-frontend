import { Injectable } from "@angular/core";
import { AutoGenerationState, EditingState, SpecificationManagerState, SpecificationRenderType } from "../../models/uiTypes";
import { JobSpecification } from "../../models/Project";
import { BehaviorSubject } from "rxjs";

/*
 * Service responsible for managing the state of the Job Specification editor
 */
@Injectable({
    providedIn: "root"
})
export class JobSpecificationStateService {
    private initSpecification: JobSpecification = {
        appSpecification: { appName: "", functionalSpecifications: [] },
        developmentSpecification: {}
    };
    private initialState: SpecificationManagerState = {
        editingState: {
            editedSpecification: this.initSpecification,
            isEditModeOn: false
        },
        autoGenerationState: {
            autoGeneratedSpecification: this.initSpecification,
            isAutoGenerationModeOn: false
        },
        renderType: SpecificationRenderType.UI
    }

    private stateSubject = new BehaviorSubject<SpecificationManagerState>(this.initialState);
    state$ = this.stateSubject.asObservable();

    get state(): SpecificationManagerState {
        return this.stateSubject.value;
    }

    get editingState(): EditingState {
        return this.state.editingState;
    }

    get editedSpecification(): JobSpecification | undefined {
        return this.state.editingState.editedSpecification;
    }
    
    get isEditModeOn(): boolean {
        return this.state.editingState.isEditModeOn;
    }

    get jsonValue(): string | undefined {
        return this.state.editingState.jsonValue;
    }

    get jsonStringFromEditor(): string | undefined {
        return this.state.editingState.jsonStringFromEditor;
    }

    get autoGenerationState(): AutoGenerationState {
        return this.state.autoGenerationState;
    }
    
    get autoGeneratedSpecification(): JobSpecification | undefined {
        return this.state.autoGenerationState.autoGeneratedSpecification;
    }
    
    get isAutoGenerationModeOn(): boolean {
        return this.state.autoGenerationState.isAutoGenerationModeOn;
    }

    get renderType(): SpecificationRenderType {
        return this.state.renderType;
    }

    set state(newState: SpecificationManagerState) {
        this.stateSubject.next(newState);
    }

    setEditedSpecification(editedSpecification?: JobSpecification): void {
        this.state = {
            ...this.state,
            editingState: {
                ...this.state.editingState,
                editedSpecification: editedSpecification,
            },
        };
    }

    setIsEditModeOn(isEditModeOn: boolean): void {
        this.state = {
            ...this.state,
            editingState: {
                ...this.state.editingState,
                isEditModeOn: isEditModeOn,
            },
        };
    }

    setAutoGeneratedSpecification(autoGeneratedSpecification: JobSpecification): void {
        this.state = {
            ...this.state,
            autoGenerationState: {
                ...this.state.autoGenerationState,
                autoGeneratedSpecification: autoGeneratedSpecification,
            },
        };
    }

    setIsAutoGenerationModeOn(isAutoGenerationModeOn: boolean): void {
        this.state = {
            ...this.state,
            autoGenerationState: {
                ...this.state.autoGenerationState,
                isAutoGenerationModeOn: isAutoGenerationModeOn,
            },
        };
    }

    setJsonValue(jsonValue: string): void {
        this.state = {
            ...this.state,
            editingState: {
                ...this.state.editingState,
                jsonValue: jsonValue,
            },
        };
    }

    setJsonStringFromEditor(jsonStringFromEditor: string): void {
        this.state = {
            ...this.state,
            editingState: {
                ...this.state.editingState,
                jsonStringFromEditor: jsonStringFromEditor,
            },
        };
    }

    setRenderType(renderType: SpecificationRenderType): void {
        this.state = {
            ...this.state,
            renderType: renderType
        };
    }
}